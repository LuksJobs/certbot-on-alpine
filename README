Adicione e renove automaticamente os certificados SSL do site usando a autoridade de certificação livre 
"Letsencrypt" junto com a extensão do "Certbot", criando uma configuração em cima do servidor nginx 
apartir do SO Alpine-Linux 3.7

Mais Informações:

Saiba mais sobre o letsencrypt: https://letsencrypt.org
Certbot github: https://github.com/certbot/certbot
Alpine-Linux: https://wiki.alpinelinux.org/wiki/Nginx_as_reverse_proxy_with_acme_(letsencrypt)
Nginx: https://nginx.org/en/

INSTRUÇÕES DE USO:

Independentemente do Webserver utilizado, você sempre pode usar o seguinte comando manual para obter um certificado TLS. 
Suponha que seu Webroot seja alocado em: /var/www/seu-dominio.com/, execute o seguinte comando manual abaixo para obter o certificado em seu domínio:

$ certbot certonly --webroot --agree-tos --email your-email address -d your-domain.com -w /var/www/your-domain.com/

Abaixo confira os significados dos parâmetos utilizados:

[certonly] diz ao certbot para obter apenas o certificado. 
[–webroot] especifica que o plug-in webroot está sendo usado. 
[-agree-tos] significa em concordar com os termos de serviço do Let's Encrypt. 
[email adress] é usado para receber o aviso de expiração do Let’s Encrypt e também pode ser usado para recuperar chaves de cryptografia. 
[-d] opção que especifica o nome do domínio. 
[-w] opção que especifica o caminho da raiz da aplicação web.

Caso não queira utilizar o comando manual, você pode seguir o passo-a-passo de configuração utilizando o código:

$ certbot certonly 

********************

Após realizar as configurações, agora iremos configurar o certificado dentro do Nginx, abra o bloco do seu domínio dentro das configurações do Nginx.
Exemplo: sudo vim /etc/nginx/site-avaliable/your-domain.com.conf

Agora configuraremos dentro Nginx; 

server {
        listen 80;
        server_name seu-dominio.com;
        return 301 https:$server_name$request_uri;
}

server {
        listen 443 ssl;
        server_name seu-dominio.com;

        root /var/www/seu-dominio.com/;
        
        ssl_certificate /etc/letsencrypt/live/seu-dominio.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/seu-dominio.com/privkey.pem;

        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_protocols TLSv1.1 TLSv1.2;

        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security max-age=15768000; 
		
		}

Após modificar o Nginx, iremos testar com o comando abaixo:

sudo nginx -t para testar; Se tudo ocorrer bem, "nginx stop" depois disso, "nginx start".

